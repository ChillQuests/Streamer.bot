using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Net;
using System.Text;
using System.Web;

public class CPHInline
{
    public bool Execute()
    {
        // Discord API endpoint for creating scheduled events
        string url = "https://discord.com/api/guilds/<you-discord-server-id>/scheduled-events";
        
        // Steam API endpoint for game details (we only care about the main header image
        string steamAppUrl = "http://store.steampowered.com/api/appdetails?appids=";
        
        // Store game id
        string gameId = args["gameId"].ToString();
        
        // Store results of Steam API call game header image
        string gameHeaderImageUri = string.Empty;
        string gameHeaderImageData = string.Empty;
        
        // Input vars
        var streamTitle = args["targetChannelTitle"].ToString();
        var streamLocation = string.Concat("https://www.twitch.tv/", args["targetUserName"].ToString().ToLower());
        var streamDescription = args["targetDescriptionEscaped"].ToString();
        
        // Get compatible game art from steam
        using (HttpClient steamApiClient = new())
        {
            // Make first call to Steam API to get game details based on "gameId" from input vars
            var gameDetail = steamApiClient.GetAsync(string.Concat(steamAppUrl, gameId)).Result;
            if (gameDetail != null && gameDetail.IsSuccessStatusCode)
            {
                // Read results content and extract "header_image" value from payload
                var gameDetailPayload = JObject.Parse(gameDetail.Content.ReadAsStringAsync().Result);
                
                // Check to see if the call has a valid game record
                if ((string)gameDetailPayload["success"] == "true")
                {
                    gameHeaderImageUri = (string)gameDetailPayload[gameId]["data"]["header_image"];

                    // Make second call to return and conmvert the game's main header image to Discord's required Data URI Scheme 
                    var gameHeaderImageDataResponse = steamApiClient.GetAsync(gameHeaderImageUri).Result;
                    if (gameHeaderImageDataResponse != null && gameHeaderImageDataResponse.IsSuccessStatusCode)
                    {
                        gameHeaderImageData = "data:image/png;base64," + Convert.ToBase64String(gameHeaderImageDataResponse.Content.ReadAsByteArrayAsync().Result);
                    }
                }
            }
        }
        
        // Build API POST JSON payload (use an "Add target info for broadcaster" sub-action prior to "Execute Code")
        var content = JsonConvert.SerializeObject(new
	    {
	        name = streamTitle,
	        scheduled_start_time = DateTimeOffset.UtcNow.AddSeconds(5),
	        scheduled_end_time = DateTimeOffset.UtcNow.AddDays(1),
	        entity_type = 3,
	        privacy_level = "2",
	        entity_metadata = new
	        {
		        location = streamLocation
		    },
	        description = streamDescription,
	        image = gameHeaderImageData
	    });
        
        // Init and prep http POST call
        // You'll need your Discord bot's token with "Manage Events" permission
        using HttpClient httpClient = new();
        var requestContent = new StringContent(content, Encoding.UTF8, "application/json");
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bot", "<your-discord-bot-token>");

        // Attempt POST and read the response to extract the newly created event id.
        // We will save the event id as an SB global variable so we can cleanup when stream ends.
        var response = httpClient.PostAsync(url, requestContent).Result;
        if (response.Content != null && response.IsSuccessStatusCode)
        {
            var guildEvent = JsonConvert.DeserializeObject<GuildEvent>(response.Content.ReadAsStringAsync().Result);
            CPH.SetGlobalVar("discordEventId", guildEvent.id, true);
        };
        return true;
    }
    
    private class GuildEvent
    {
    	public int id {get; set;}
    }
}
