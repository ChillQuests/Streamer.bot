using Newtonsoft.Json;
using System;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Net;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

public class CPHInline
{
    private static readonly HttpClient _client = new();
    private static int discordEventId = 0;

    public bool Execute()
    {
        _client.BaseAddress = new Uri("https://discord.com/api/");
        discordEventId = CPH.GetGlobalVar<int>("discordEventId", true);
        RemoveEvent();
        Thread.Sleep(5000); // Since we can't 'force' the overried to async, I disappointingly added this to give the code enough time to complete before we exited out.
        CPH.SetGlobalVar("discordEventId", 0, true);
        return true;
    }

    private static async void RemoveEvent()
    {
        await DeleteAPIResponseAsync($"guilds/<id-of-your-discord-server>/scheduled-events/{discordEventId}");
    }

    private static async Task<HttpStatusCode> DeleteAPIResponseAsync(string path)
    {
        _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bot", "<discord-bot-token>");
        using HttpResponseMessage response = await _client.DeleteAsync(path);
        response.EnsureSuccessStatusCode();
        return response.StatusCode;
    } 
}